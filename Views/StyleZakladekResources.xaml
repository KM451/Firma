<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" 
                    xmlns:vw="clr-namespace:Firma.ViewModels">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Themes/Generic.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FF83CC6A"/>-->
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF134216"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="ForestGreen"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF134216"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="LimeGreen"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="ForestGreen"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="LimeGreen"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="ForestGreen"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background" Color="#3DC3E69A"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border" Color="#FF79C75E"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" Color="#2EA8E677"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" Color="#992D8E4E"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewFocus.Border" Color="#FF79C75E"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Background" Color="#54BBD6A1"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Border" Color="#FF79C75E"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.WindowBrushKey}" Color="#FFF9FBF3"/>
    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FF134216"/>
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF134216"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="LightGreen"/>
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="LightGreen"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF134216"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="ForestGreen"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FFE1F1AE"/>
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="ForestGreen"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF9FBF3" Offset="0.0"/>
        <GradientStop Color="ForestGreen" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF9FBF3" Offset="0.0"/>
        <GradientStop Color="#FFF9FBF3" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF9FBF3" Offset="0.0"/>
        <!--  combobox bez myszy -->
        <GradientStop Color="#FFF9FBF3" Offset="1.0"/>
        <!--  combobox bez myszy -->
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="HeaderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#FFACD68A" Offset="0.1"/>
        <GradientStop Color="#FFC6E898" Offset="0.6"/>
        <GradientStop Color="#FFF2FFCA" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="HeaderBorderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="ForestGreen" Offset="0.0"/>
        <GradientStop Color="#FF83CC6A" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="LabelStandardowy" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="5,1,5,1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
    </Style>
    <Style x:Key="LabelStandardowy2" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Margin" Value="10,1,1,1"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment"  Value="Right"/>
        <Setter Property="Padding" Value="5,1,5,1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
    </Style>
    <Style x:Key="LabelStandardowyP" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="0,2,2,1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
    </Style>
    <Style x:Key="LabelBold" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="5,1,5,1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="DockPanel.Dock" Value="Left"/>
    </Style>
    <Style x:Key="LabelStandardowyCenter" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="5,1,5,1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="LabelStandardowy1" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Margin" Value="0,3,1,1"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="1,2,0,0"/>
        <Setter Property="Foreground" Value="#FF102313"/>
    </Style>
    <Style x:Key="Label70" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Padding" Value="2,3,2,1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
    </Style>
    <Style x:Key="LabelR" TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
    </Style>

    <Style x:Key="LabelR2" TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10,0,0,0"/>
    </Style>


    <Style x:Key="Label50" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Margin" Value="2,5,1,1"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="Padding" Value="5,1,5,1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
    </Style>
    <Style x:Key="Label100" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Margin" Value="2,5,1,1"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Padding" Value="2,1,1,1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
    </Style>
    <Style x:Key="LabelToolTip" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
    </Style>
    <Style x:Key="Label22/" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0,2,0,0"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Content" Value="/"/>
    </Style>
    <Style x:Key="Label22S" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="Padding" Value="5,2,5,5"/>
    </Style>
    <Style x:Key="Label22S2" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Setter Property="Padding" Value="0,2,0,0"/>
        <Setter Property="Margin" Value="5,0,2,0"/>
    </Style>
    <Style x:Key="LabelRaport" TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10"/>
    </Style>
    <Style x:Key="LabelRaport2" TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10"/>
    </Style>
    <Style x:Key="LabelRaport3" TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Margin" Value="10,10,0,10"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>
    
    
    <Style x:Key="TextBoxStandard" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="128"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Style.Triggers>
            <Trigger  Property="Validation.HasError"  Value="true">
                <Setter Property="ToolTip"
                Value="{Binding  RelativeSource={x:Static RelativeSource.Self},
                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxStandardWrM" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Style.Triggers>
            <Trigger  Property="Validation.HasError"  Value="true">
                <Setter Property="ToolTip"
                Value="{Binding  RelativeSource={x:Static RelativeSource.Self},
                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxZZM" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
    </Style>

    <Style x:Key="TextBoxRaport" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="60"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
    </Style>
    <Style x:Key="TextBoxRaport3" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="140"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="BorderBrush" Value="#FFF2FBE1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF2FBE1"/>
        <Setter Property="SelectionBrush" Value="#FFF2FBE1"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>
    <Style x:Key="TextBoxRaport4" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="BorderBrush" Value="#FFF2FBE1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF2FBE1"/>
        <Setter Property="SelectionBrush" Value="#FFF2FBE1"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>
    <Style x:Key="TextBoxRaport5" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="BorderBrush" Value="#FFF2FBE1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF2FBE1"/>
        <Setter Property="SelectionBrush" Value="#FFF2FBE1"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>
    <Style x:Key="TextBoxZKM" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="TextBoxZZS" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Style.Triggers>
            <Trigger  Property="Validation.HasError"  Value="true">
                <Setter Property="ToolTip"
                Value="{Binding  RelativeSource={x:Static RelativeSource.Self},
                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxZZD" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="350"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Style.Triggers>
            <Trigger  Property="Validation.HasError"  Value="true">
                <Setter Property="ToolTip"
                Value="{Binding  RelativeSource={x:Static RelativeSource.Self},
                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxRaport2" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="300"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Style.Triggers>
            <Trigger  Property="Validation.HasError"  Value="true">
                <Setter Property="ToolTip"
                Value="{Binding  RelativeSource={x:Static RelativeSource.Self},
                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxZZD2" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="500"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
    </Style>
    <Style x:Key="TextBoxStandardWrD" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="400"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Style.Triggers>
            <Trigger  Property="Validation.HasError"  Value="true">
                <Setter Property="ToolTip"
                Value="{Binding  RelativeSource={x:Static RelativeSource.Self},
                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxStandard200" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
    </Style>
    <Style x:Key="TextBoxStandard300" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="300"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
    </Style>
    <Style x:Key="TextBoxBold" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="128"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="BorderBrush" Value="#FFF2FBE1"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF2FBE1"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="DockPanel.Dock" Value="Right"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Text" Value="0,00 PLN"/>
    </Style>
    <Style x:Key="TextBoxZam" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
    </Style>
    <Style x:Key="TextBoxZam1" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
        <Setter Property="Padding" Value="2,1,2,1"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
    </Style>
    <Style x:Key="TextBox200" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="Margin" Value="1,5,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Setter Property="IsReadOnly" Value="True"/>
    </Style>
    <Style x:Key="TextBox150" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="24"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Margin" Value="8"/>
        <Setter Property="Padding" Value="2,1,2,1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Style.Triggers>
            <Trigger  Property="Validation.HasError"  Value="true">
                <Setter Property="ToolTip"
                Value="{Binding  RelativeSource={x:Static RelativeSource.Self},
                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

   



    <Style x:Key="TextBox117" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="117"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Setter Property="IsReadOnly" Value="True"/>
    </Style>
    <Style x:Key="TextBoxZSE" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Margin" Value="20,0,1,0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Padding" Value="2,3,2,0"/>
        <Setter Property="Text" Value="ZSE"/>
    </Style>
    <Style x:Key="TextBoxSRW" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Margin" Value="1,0,50,0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Padding" Value="2,3,2,0"/>
        <Setter Property="Text" Value="SRW"/>
    </Style>
    <Style x:Key="TextBoxSerwis" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="300"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Padding" Value="2,3,2,0"/>
    </Style>
    <Style x:Key="TextBoxSDuzy" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="auto"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    </Style>
    <Style x:Key="TextBoxToolTip" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsReadOnly" Value="True"/>
    </Style>
    <Style x:Key="TextBox50" TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Margin" Value="1,5,1,1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="SelectionBrush" Value="LightGreen"/>
        <Setter Property="IsReadOnly" Value="True"/>
    </Style>
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="0" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="3"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxItemContainerStyle1" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="0,0,2,0"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="true"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonStandardowy" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
    </Style>
    <Style x:Key="ButtonStandardowy50" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
    </Style>
    <Style x:Key="ButtonStandardowyWr" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="10,1,1,1"/>
        <Setter Property="Padding" Value="5,0,5,0"/>
    </Style>
    <Style x:Key="ButtonRight" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
    </Style>
    <Style x:Key="ButtonZam" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
    </Style>
    <Style x:Key="ButtonSerw" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
    </Style>
    <Style x:Key="ButtonStandardowy2" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="2,2,1,1"/>
    </Style>
    <Style x:Key="Button2" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="2,1,1,1"/>
    </Style>
    <Style x:Key="Button3" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="280"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="10,5,1,1"/>
    </Style>
    <Style x:Key="Button152" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="152"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Margin" Value="2,10,1,1"/>
    </Style>
    <Style x:Key="ButtonZwinRozw" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="15"/>
        <Setter Property="Width" Value="18"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="#FFE1F1AE"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Margin" Value="2,2,2,5"/>
    </Style>
    <Style x:Key="ButtonCommand" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="40"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5,20,5,0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <Style x:Key="ButtonCommandRaport" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="450"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <Style x:Key="ButtonCommandRaport2" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="350"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <!--<Style x:Key="ButtonIkona" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="25"/>
        <Setter Property="Margin" Value="2"/>
        -->
    <!--<Setter Property="Background" Value="Red"/>-->
    <!--#FFF9FBF3-->
    <!--
    </Style>-->
    <!--<Style x:Key="ButtonIkonaMala" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Margin" Value="1"/>
    </Style>-->
    <Style x:Key="ButtonEdit" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Margin" Value="1"/>
    </Style>
    <Style x:Key="ButtonIkonaMalaZZ" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Margin" Value="7,1"/>
    </Style>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="True"/>
                        <Polygon x:Name="Arrow" Fill="Black" HorizontalAlignment="Right" Margin="8,8,3,3" Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxRaport" TargetType="{x:Type ComboBox}">
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>
    
    <Style x:Key="ComboBoxItemContainerStyle1" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewFocus.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Border}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckBoxStandard" TargetType="{x:Type CheckBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Margin" Value="2,2,0,0"/>
    </Style>
    <Style x:Key="CheckBox2" TargetType="{x:Type CheckBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Margin" Value="2,8,0,0"/>
    </Style>
    <!--<Style x:Key="CheckBox3" TargetType="{x:Type CheckBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Margin" Value="8"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>-->
    <Style x:Key="GroupBoxStandard" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="2"/>
    </Style>
    <!--<Style x:Key="GroupBoxStandard2" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Height" Value="50"/>
    </Style>-->
    <Style x:Key="GroupBoxSerwis" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="3,1,3,1"/>
    </Style>
    <Style x:Key="GroupBoxSerwis2" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0,10,0,1"/>
        <Setter Property="Height" Value="74"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>
    <Style x:Key="GroupBoxSerwis3" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="3,3,3,3"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
    </Style>
    <Style x:Key="GroupBoxSerwis4" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="3,3,3,3"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>
    <Style x:Key="GroupBoxKalkCzas" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="10,10,0,1"/>
        <Setter Property="Height" Value="70"/>
        <Setter Property="Width" Value="280"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>
    <Style x:Key="GroupBoxObl" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="10,10,0,1"/>
        <Setter Property="Height" Value="80"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>
    <Style x:Key="RadioButtonStandard" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Margin" Value="2,0,0,1"/>
    </Style>
    <!--<Style x:Key="RadioButtonCenter" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Margin" Value="2,0,0,1"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>-->
    <Style x:Key="RadioButtonM25" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Margin" Value="25,2,0,1"/>
    </Style>
    <Style x:Key="ComboBoxStandard" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="129"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>
    <Style x:Key="ComboBox100" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>
    <Style x:Key="ComboBoxS150" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>
    <Style x:Key="ComboBox200" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>
    <Style x:Key="ComboBoxStandard2" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="129"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,2,1,0"/>
        <Setter Property="Padding" Value="4,1,4,0"/>
    </Style>
    <Style x:Key="ComboBoxStandard3" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="129"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,2,1,0"/>
        <Setter Property="Padding" Value="4,1,4,0"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
    </Style>
    <Style x:Key="ComboBoxAutoStr" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>
    <!--<Style x:Key="ComboBoxAuto" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>-->
    <Style x:Key="ComboBoxAuto1" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,1,1,0"/>
        <Setter Property="Padding" Value="7,3,4,0"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>
    <Style x:Key="ComboBoxAuto2" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="Padding" Value="7,3,4,0"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>
    <Style x:Key="ComboBoxAuto3" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="3,0,3,3"/>
        <Setter Property="Padding" Value="4,2,4,2"/>
    </Style>
    <Style x:Key="ComboBox150" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="8"/>
        <Setter Property="Padding" Value="5,4,2,2"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>
    <Style x:Key="ComboBox210" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Width" Value="210"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
        <Setter Property="Padding" Value="5,4,2,2"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>
    <Style x:Key="SeparatorStandard" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="DimGray"/>
    </Style>
    <!--<Style x:Key="BorderStandard" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="DimGray"/>
        <Setter Property="Width" Value="1"/>
        <Setter Property="Margin" Value="1"/>
    </Style>-->
    <Style x:Key="BorderPasek" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="BorderBrush" Value="DimGray"/>
    </Style>
    <Style x:Key="BorderAbout" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#FF263F67"/>
    </Style>
    <Style x:Key="BorderAbout2" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="5,0,5,5"/>
    </Style>
    <Style x:Key="Border2" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="#FF132913"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    <Style x:Key="BorderTimer" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="DimGray"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="Margin" Value="0,0,2,0"/>
        <Setter Property="Padding" Value="5,3,5,3"/>
    </Style>
    <Style x:Key="BorderSerw" TargetType="{x:Type Border}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="5,0,0,0"/>
        <Setter Property="Margin" Value="0.5"/>
    </Style>
    <Style x:Key="BorderPaskaB" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="240"/>
    </Style>
    <Style x:Key="DataGridStandard" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Opacity" Value="10"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Style.Triggers>
            <Trigger  Property="Validation.HasError"  Value="true">
                <Setter Property="ToolTip"
                Value="{Binding  RelativeSource={x:Static RelativeSource.Self},
                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DataGridStandard2" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Opacity" Value="10"/>
    </Style>
    <Style x:Key="DataGridStandard3" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Opacity" Value="10"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
    </Style>
    <Style x:Key="DataGridSerw" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Opacity" Value="10"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="Height" Value="150"/>
    </Style>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                            <!--<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>-->
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>

                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>-->
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>-->
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxStandard" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,1"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>
    <Style x:Key="ListBox22" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,1,1,1"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>
    <Style x:Key="ListBox22Zam" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,1"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>


    </Style>
    <Style x:Key="ListBox24" TargetType="{x:Type ListBox}">
        <Setter Property="Height" Value="24"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,1"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>
    <Style x:Key="ListBox24x50" TargetType="{x:Type ListBox}">
        <Setter Property="Height" Value="24"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,1"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>
    <Style x:Key="ToggleButtonStandard" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Margin" Value="2"/>
    </Style>
    <Style x:Key="ToolBarStandard" TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
    </Style>
    <Style x:Key="DatePickerRaport" TargetType="{x:Type DatePicker}">
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
    </Style>
    <Style x:Key="DatePickerRaport2" TargetType="{x:Type DatePicker}">
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
    </Style>
    <Style x:Key="BaseDatePicker" TargetType="{x:Type DatePicker}">
        <Setter Property="Width" Value="128"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="Padding" Value="3,0,0,0"/>
        <Style.Triggers>
            <Trigger  Property="Validation.HasError"  Value="true">
                <Setter Property="ToolTip"
                Value="{Binding  RelativeSource={x:Static RelativeSource.Self},
                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DatePickerZam" TargetType="{x:Type DatePicker}">
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,0"/>
        <Setter Property="Padding" Value="3,0,0,0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>
    <Style x:Key="DatePicker1" TargetType="{x:Type DatePicker}">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,5,1,1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>
    <Style x:Key="DatePicker150" TargetType="{x:Type DatePicker}">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="8"/>
        <Setter Property="Padding" Value="2,1,2,1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Style.Triggers>
            <Trigger  Property="Validation.HasError"  Value="true">
                <Setter Property="ToolTip"
                Value="{Binding  RelativeSource={x:Static RelativeSource.Self},
                Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="Expander" TargetType="{x:Type Expander}">
        <Setter Property="BorderBrush" Value="DarkBlue"/>
    </Style>
    <Style x:Key="HeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{StaticResource HeaderBrush}" />
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment"  Value="Center"/>
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <!--<Style x:Key="SeparatorTlo" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="#FFF2FBE1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Width" Value="10"/>
    </Style>-->
    <Style x:Key="DockPanel10" TargetType="{x:Type DockPanel}">
        <Setter Property="Margin" Value="10"/>
    </Style>
    <Style x:Key="DockPanelS" TargetType="{x:Type DockPanel}">
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="Width" Value="auto"/>
    </Style>
    <Style x:Key="ListBoxItem1" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Padding" Value="0,1,4,1"/>
    </Style>
    <Style x:Key="ListBox150" TargetType="{x:Type ListBox}">
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Background" Value="#FFF9FBF3"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="BorderBrush" Value="#FF134216"/>
        <Setter Property="Foreground" Value="#FF102313"/>
        <Setter Property="Margin" Value="1,0,1,1"/>
        <Setter Property="Padding" Value="4,0"/>
    </Style>
    <Style x:Key="StatusBar1" TargetType="{x:Type StatusBar}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
    </Style>
    <Style x:Key="MenuBar1" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="#FFF9FBF3"/>
    </Style>
    <Style x:Key="StackPanelLewy" TargetType="{x:Type StackPanel}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>
    <Style x:Key="StatausBarIt1" TargetType="{x:Type StatusBarItem}">
        <Setter Property="Width" Value="236"/>
        <Setter Property="Margin" Value="3"/>
    </Style>
    <Style x:Key="TextBlockAbout" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Foreground" Value="#FF263F67"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="50,2,5,2"/>
        <Setter Property="FontFamily" Value="Times New Roman"/>
    </Style>
    <Style x:Key="TextBlockAbout2" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Foreground" Value="#FF263F67"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="1,2,1,5"/>
        <Setter Property="FontFamily" Value="Times New Roman"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Height" Value="auto"/>
    </Style>
    <ControlTemplate x:Key="ListBoxTemplate1" TargetType="{x:Type ListBox}">
        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="1" SnapsToDevicePixels="true">
            <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </ScrollViewer>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="DataGridTemplate1" TargetType="{x:Type DataGrid}">
        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                <ScrollViewer.Template>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <Grid Grid.Column="1" Grid.Row="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </ScrollViewer.Template>
                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </ScrollViewer>
        </Border>
    </ControlTemplate>
    <ControlTemplate x:Key="RadioButtonTemplate1" TargetType="{x:Type RadioButton}">
        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Grid x:Name="markGrid" Margin="2">
                    <Ellipse x:Name="optionMark" Fill="{StaticResource RadioButton.Static.Glyph}" MinWidth="6" MinHeight="6" Opacity="0"/>
                </Grid>
            </Border>
            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="true">
                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                <Setter Property="Padding" Value="4,-1,0,0"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Background}"/>
                <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Border}"/>
                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.MouseOver.Glyph}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Border}"/>
                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Background}"/>
                <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Border}"/>
                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Pressed.Glyph}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter Property="Opacity" TargetName="optionMark" Value="0.56" />

            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="CheckBoxTemplate1" TargetType="{x:Type CheckBox}">
        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="checkBoxBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <Grid x:Name="markGrid">
                    <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                    <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
                </Grid>
            </Border>
            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="true">
                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                <Setter Property="Padding" Value="4,-1,0,0"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonTemplate1" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="false">
                <Setter Property="Background" TargetName="border" Value="#FFE1F1AE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonCommandTemplate" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.3,0" StartPoint="0.3,1">
                            <GradientStop Color="#FF66A909"/>
                            <GradientStop Color="White" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="false">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.3,1" StartPoint="0.3,0">
                            <GradientStop Color="#FF66A909"/>
                            <GradientStop Color="White" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonOdejmijCircle" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/minus_circle.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/minus_circle_FILL.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonDodajCicrcle" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/add_circle.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/add_circle_FILL.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonDodajNew" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/edit_FILL1.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/edit_FILL0.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonZakladka" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderThickness" TargetName="border" Value="0"/>
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/cancel_FILL1_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="false">
                <Setter Property="BorderThickness" TargetName="border" Value="0"/>
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/cancel_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonInfo" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/import_contacts_FILL1_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/import_contacts_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ButtonBlokada" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/lock_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/lock_open_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonNaWierzchu" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/unpin_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/outline_push_pin_black_24dp.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--<ControlTemplate x:Key="ButtonDodaj" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/add_box_FILL1_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/add_box_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonZmien" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/change_circle_FILL1_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/change_circle_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonUsun" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/delete_FILL1_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/delete_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>-->
    <!--<ControlTemplate x:Key="ButtonFiltr" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/filter_alt_off_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/filter_alt_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>-->
    <ControlTemplate x:Key="ButtonUstaw" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.BorderThickness" Value="3"/>
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/build_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/build_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ButtonZnajdz" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Button.BorderThickness" Value="3"/>
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/search_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="false">
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="/ViewResources/Icons/search_FILL0_wght400_GRAD0_opsz48.png"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="TextBoxTemplate1" TargetType="{x:Type TextBoxBase}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTemplate1" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>